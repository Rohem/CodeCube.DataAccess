<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeCube.DataAccess.EntityFrameworkCore.Sql</name>
    </assembly>
    <members>
        <member name="T:CodeCube.DataAccess.EntityFrameworkCore.Sql.ContextFactory.DesignTimeDbContextFactory`1">
            <summary>
                A factory for creating derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. Inherit you context from this class to enable
                design-time services for context types that do not have a public default constructor. At design-time,
                derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances can be created in order to enable specific design-time
                experiences such as Migrations. Design-time services will automatically discover implementations of
                this interface that are in the startup assembly or the same assembly as the derived context.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.ContextFactory.DesignTimeDbContextFactory`1.CreateDbContext(System.String[])">
            <summary>Creates a new instance of a derived context.</summary>
            <param name="args"> Arguments provided by the design-time service. </param>
            <returns> An instance of ApplicationDbContext.</returns>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.ContextFactory.DesignTimeDbContextFactory`1.CreateDbContext(System.String)">
            <summary>Creates a new instance of a derived context.</summary>
            <param name="connectionstring">The connectionstring to the database.</param>
            <returns> An instance of ApplicationDbContext.</returns>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.ContextFactory.DesignTimeDbContextFactory`1.GetConnectionstring">
            <summary>
            Method to retrieve the connectionstring. This is used by the factory to get the connectionstring while running migrations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CodeCube.DataAccess.EntityFrameworkCore.Sql.Context.ApplicationDbContext">
            <summary>
            Inherit from this context to enable softdelete filtering.
            </summary>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.Context.ApplicationDbContext.RemoveById``1(System.Guid)">
            <summary>
            Deletes the entity with the specified id.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="id"></param>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.Context.ApplicationDbContext.SaveChanges">
            <summary>
                <para>
                    Saves all changes made in this context to the database.
                </para>
                <para>
                    This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
            </summary>
            <returns>
                The number of state entries written to the database.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.Context.ApplicationDbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Saves all changes made in this context to the database.
                </para>
                <para>
                    This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
                    changes to entity instances before saving to the underlying database. This can be disabled via
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
                </para>
                <para>
                    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                    that any asynchronous operations have completed before calling another method on this context.
                </para>
            </summary>
            <param name="acceptAllChangesOnSuccess">
                Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
                been sent successfully to the database.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of state entries written to the database.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">
                An error is encountered while saving to the database.
            </exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">
                A concurrency violation is encountered while saving to the database.
                A concurrency violation occurs when an unexpected number of rows are affected during save.
                This is usually because the data in the database has been modified since it was loaded into memory.
            </exception>
        </member>
        <member name="M:CodeCube.DataAccess.EntityFrameworkCore.Sql.Context.ApplicationDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Override this method to further configure the model that was discovered by convention from the entity types
                exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
                and re-used for subsequent instances of your derived context.
            </summary>
            <remarks>
                If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
                then this method will not be run.
                When overridden, don't forget to call base.OnModelCreating if you want the softdelete to keep working.
            </remarks>
            <param name="modelBuilder">
                The builder being used to construct the model for this context. Databases (and other extensions) typically
                define extension methods on this object that allow you to configure aspects of the model that are specific
                to a given database.
            </param>
        </member>
    </members>
</doc>
